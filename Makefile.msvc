# This variant of Makefile is specific for MSVC on Windows and should be processed with nmake.exe
# this file is for general settings such as file list, etc.
# machine-specific settings such as include paths and #defines are in Makefile.local
include Makefile.local

# set up folder names
SRCDIR    = src
OBJDIR    = obj
EXEDIR    = exe
TESTSDIR  = tests
TORUSDIR  = src/torus

# sources of the main library
SOURCES   = \
            py_wrapper.cpp \
            math_core.cpp \
            math_fit.cpp \
            math_gausshermite.cpp \
            math_geometry.cpp \
            math_linalg.cpp \
            math_ode.cpp \
            math_optimization.cpp \
            math_random.cpp \
            math_sample.cpp \
            math_specfunc.cpp \
            math_sphharm.cpp \
            math_spline.cpp \
            particles_io.cpp \
            actions_focal_distance_finder.cpp \
            actions_isochrone.cpp \
            actions_spherical.cpp \
            actions_staeckel.cpp \
            actions_torus.cpp \
            coord.cpp \
            cubature.cpp \
            df_base.cpp \
            df_disk.cpp \
            df_factory.cpp \
            df_halo.cpp \
            df_spherical.cpp \
            galaxymodel_base.cpp \
            galaxymodel_densitygrid.cpp \
            galaxymodel_fokkerplanck.cpp \
            galaxymodel_jeans.cpp \
            galaxymodel_losvd.cpp \
            galaxymodel_selfconsistent.cpp \
            galaxymodel_spherical.cpp \
            galaxymodel_velocitysampler.cpp \
            orbit.cpp \
            orbit_lyapunov.cpp \
            potential_analytic.cpp \
            potential_base.cpp \
            potential_composite.cpp \
            potential_cylspline.cpp \
            potential_dehnen.cpp \
            potential_disk.cpp \
            potential_factory.cpp \
            potential_ferrers.cpp \
            potential_king.cpp \
            potential_multipole.cpp \
            potential_perfect_ellipsoid.cpp \
            potential_spheroid.cpp \
            potential_utils.cpp \
            raga_core.cpp \
            raga_binary.cpp \
            raga_losscone.cpp \
            raga_potential.cpp \
            raga_relaxation.cpp \
            raga_trajectory.cpp \
            utils.cpp \
            utils_config.cpp \
            fortran_wrapper.cpp \
            nemo_wrapper.cpp \

# ancient Torus code
TORUSSRC  = CHB.cc \
            Fit.cc \
            Fit2.cc \
            GeneratingFunction.cc \
            Orb.cc \
            PJMCoords.cc \
            PJMNum.cc \
            Point_ClosedOrbitCheby.cc \
            Point_None.cc \
            Torus.cc \
            Toy_Isochrone.cc \
            WD_Numerics.cc \

# test and example programs
TESTSRCS  = test_math_core.cpp \
            test_math_linalg.cpp \
            test_math_spline.cpp \
            test_coord.cpp \
            test_units.cpp \
            test_utils.cpp \
            test_orbit_integr.cpp \
            test_orbit_lyapunov.cpp \
            test_potentials.cpp \
            test_potential_expansions.cpp \
            test_actions_isochrone.cpp \
            test_actions_spherical.cpp \
            test_actions_staeckel.cpp \
            test_actions_torus.cpp \
            test_action_finder.cpp \
            test_df_halo.cpp \
            test_df_spherical.cpp \
            test_density_grid.cpp \
            test_losvd.cpp \
            test_galaxymodel.cpp \
            example_actions_nbody.cpp \
            example_df_fit.cpp \
            example_doublepowerlaw.cpp \
            example_self_consistent_model.cpp \
            mkspherical.cpp \
            phaseflow.cpp \
            raga.cpp \

LIBNAME  = agama.lib
PYDNAME  = agama.pyd
OBJECTS = $(SOURCES:.cpp=.obj)
OBJECTS = obj/$(OBJECTS:  = obj/)
TORUSOBJ= $(TORUSSRC:.cc=.obj)
TORUSOBJ= obj/$(TORUSOBJ:  = obj/)
TESTEXE = $(TESTSRCS:.cpp=.exe)
TESTEXE = exe/$(TESTEXE:  = exe/)
CXXFLAGS = $(CXXFLAGS) -I$(SRCDIR)

# this is the default target (build all), if make is launched without parameters
all: $(OBJDIR) $(EXEDIR) $(LIBNAME) $(PYDNAME) $(TESTEXE)

$(LIBNAME): $(OBJECTS) $(TORUSOBJ) Makefile.local
	lib.exe $(OBJECTS) $(TORUSOBJ) $(LINK_FLAGS) /out:$(LIBNAME)

$(PYDNAME): $(OBJECTS) $(TORUSOBJ) Makefile.local
	link.exe $(OBJECTS) $(TORUSOBJ) $(LINK_FLAGS) /dll /out:$(PYDNAME) /implib:agama_pyd.lib
	del agama_pyd.lib
	del agama_pyd.exp

$(TESTEXE): $(LIBNAME) Makefile.local

{src}.cpp{obj}.obj:
	$(CC) $(CXXFLAGS) $(COMPILE_FLAGS) -c $< -Foobj/

{src/torus}.cc{obj}.obj:
	$(CC) $(CXXFLAGS) $(COMPILE_FLAGS) -c $< -Foobj/

{tests}.cpp{exe}.exe:
	$(CC) -Fe: "$@" -Foobj/tmp.obj "$<" $(CXXFLAGS) /link $(LIBNAME) $(EXE_FLAGS)

$(OBJDIR):
	mkdir $(OBJDIR)

$(EXEDIR):
	mkdir $(EXEDIR)

# run tests (both C++ and python)
test:
	cd py
	python alltest.py
