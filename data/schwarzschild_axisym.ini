# Example input file for the schwarzschild.py program
# This parameter file constructs a three-component disk-bulge-halo system as in Vasiliev&Athanassoula(2015)

# first we list density ingredients (each section name should start with 'density' and have no spaces)
[Density_bulge]
type=Sersic
sersicIndex=2
mass=0.25
scaleRadius=0.215
axisratioz=0.8

[Density_disk]
type=Disk
mass=1
scaleRadius=1
scaleHeight=-0.0625

[Density_halo]
type=Spheroid
mass=20
gamma=1
beta=3
scaleRadius=5
outerCutoffRadius=55
cutoffStrength=2.5

# next we define two potential solvers - disky density components are delegated to CylSpline,
# and spheroidal components - to Multipole.
# section names should start with 'Potential' and are otherwise arbitrary;
# the total potential will contain all such components
# (e.g. one could add a central massive black hole by defining an extra Plummer potential with scaleRadius=0)

[Potential_disk]
# list the section names of corresponding density components
density=density_Disk
# potential solver type
type=cylspline
# number of azumuthal harmonics - 0 means axisymmetry
mmax=0
# grid parameters
gridsizer=20
gridsizez=25
rmin=0.1
rmax=10
zmin=0.02
zmax=10

[potential_spher]
density=density_bulge, density_halo
type=multipole
lmax=2
gridSizeR=30

# now comes the list of separate components of the Schwarzschild model.
# each section should start with 'Component', and corresponds to a complete orbit-based model
# (definition of the density profile and its discretization, kinematic constraints,
# initial conditions for the orbit library, orbit integration and storage parameters,
# and finally the parameters for exporting an N-body model).
# All models are constructed in the same total potential, but the density profiles
# may be selected at will (e.g., be a combination of one or more density components defined above,
# even if these components do not contribute to the potential).

[Component_bulge]
# list of density models (section names) that define the density profile of this component:
# here we only have one per component, but in general there could be more than one comma-separated names
density=Density_bulge

# subsection: density constraints
# type of the density discretization model
type=DensityClassicLinear
# radial grid
gridr=numpy.linspace(0.04, 1, 30)
# number of subdivision lines per each of three panes in one radial shell
stripsPerPane=2
# flattening factor of the spatial grid
axisRatioZ=0.8

# subsection: kinematic constraints
# number of radial points in kinematic grid
kinemgrid=numpy.linspace(0.05, 0.5, 10)
# degree of B-spline basis function for recording the density-weighted velocity dispersions
# (0 to 3: zero means histograms, 3 is for cubic splines)
kinemDegree=2
# constraint for the velocity anisotropy in the solution (if omitted, it will not be constrained)
beta=0

# section: orbit library params
# integration time measured in orbital periods (actual time is different for each orbit)
intTime=100
# number of orbits in this components - should generally be larger than the number of constraints
# by at least a factor of few, maybe even ten
numOrbits=5000

# section: N-body model params
# number of particles drawn from this component
nbody=40000


[Component_disk]
density=density_disk

# density constraints
type=DensityCylindricalLinear
gridR=agama.nonuniformGrid(20, 0.2, 5)
gridZ=agama.nonuniformGrid(20, 0.02, 0.5)
mmax=0

# orbit library params
numOrbits=20000
# parameters of initial condition generation that also define the method for assigning velocities:
# if neither icbeta nor ickappa is specified, this means Eddington (isotropic velocities drawn from a DF);
# if icbeta is given, this means spherical Jeans model with a constant anisotropy coefficient;
# if both icbeta and ickappa are given, this means axisymmetric Jeans Anisotropic Model.
icbeta=0.6
ickappa=1.0
intTime=100
# note that for this component we do not constrain the velocity in the solution (beta=...),
# only specify the parameters of the initial conditions generator

# N-body output
nbody=160000


[Component_halo]
density=Density_halo
# density constraints
type=DensityClassicLinear
gridR=agama.nonuniformGrid(50, 0.2, 80.0)
stripsPerPane=2
# kinematic constraints
kinemgrid=agama.nonuniformGrid(20, 0.4, 80.0)
kinemDegree=2
beta=0
# orbit library params
intTime=100
numOrbits=25000
# N-body output
nbody=800000
